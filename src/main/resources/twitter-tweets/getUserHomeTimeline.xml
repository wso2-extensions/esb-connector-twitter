<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2023, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 LLC. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<template xmlns="http://ws.apache.org/ns/synapse" name="getUserHomeTimeline">
    <parameter name="id"
               description="The ID of the Twitter user."/>

    <parameter name="end_time"
               description="The newest, most recent UTC timestamp to which the Tweets will be provided."/>
    <parameter name="max_results"
               description="The maximum number of results to be returned per page."/>
    <parameter name="pagination_token"
               description="This parameter is used to move forwards or backwards through 'pages' of results,
               based on the value of the next_token or previous_token in the response."/>
    <parameter name="since_id"
               description="Returns results with a Tweet ID greater (more recent) than the specified ID."/>
    <parameter name="start_time"
               description="The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be given."/>
    <parameter name="until_id"
               description="Returns results with a Tweet ID less than (that is, older than) the specified ID."/>

    <parameter name="exclude"
               description="Comma-separated list of the types of Tweets to exclude from the response."/>
    <parameter name="expansions"
               description="Additional fields required in the response."/>
    <parameter name="media_fields"
               description="This fields parameter enables you to select which specific media fields will deliver."/>
    <parameter name="place_fields"
               description="This fields parameter enables you to select which specific place fields will deliver."/>
    <parameter name="poll_fields"
               description="This fields parameter enables you to select which specific poll fields will deliver."/>
    <parameter name="tweet_fields"
               description="This fields parameter enables you to select which specific Tweet fields will deliver."/>
    <parameter name="user_fields"
               description="This fields parameter enables you to select which specific user fields will deliver."/>

    <parameter name="responseVariable" description="The name of the variable to which the response should be stored."/>
    <parameter name="overwriteBody" description="Replace the Message Body in Message Context with the response of the operation."/>

    <sequence>
        <property name="uri.var.id" expression="$func:id"/>
        <property name="uri.var.end_time" expression="$func:end_time"/>
        <property name="uri.var.max_results" expression="$func:max_results"/>
        <property name="uri.var.pagination_token" expression="$func:pagination_token"/>
        <property name="uri.var.since_id" expression="$func:since_id"/>
        <property name="uri.var.start_time" expression="$func:start_time"/>
        <property name="uri.var.until_id" expression="$func:until_id"/>
        <property name="uri.var.exclude" expression="$func:exclude"/>
        <property name="uri.var.expansions" expression="$func:expansions"/>
        <property name="uri.var.media_fields" expression="$func:media_fields"/>
        <property name="uri.var.place_fields" expression="$func:place_fields"/>
        <property name="uri.var.poll_fields" expression="$func:poll_fields"/>
        <property name="uri.var.tweet_fields" expression="$func:tweet_fields"/>
        <property name="uri.var.user_fields" expression="$func:user_fields"/>

        <script language="js">
            <![CDATA[
                var queryParams = [];

                // Optional query param variables
                var end_time = mc.getProperty("uri.var.end_time");
                var max_results = mc.getProperty("uri.var.max_results");
                var pagination_token = mc.getProperty("uri.var.pagination_token");
                var since_id = mc.getProperty("uri.var.since_id");
                var start_time = mc.getProperty("uri.var.start_time");
                var until_id = mc.getProperty("uri.var.until_id");
                var exclude = mc.getProperty("uri.var.exclude");
                var expansions = mc.getProperty("uri.var.expansions");
                var media_fields = mc.getProperty("uri.var.media_fields");
                var place_fields = mc.getProperty("uri.var.place_fields");
                var poll_fields = mc.getProperty("uri.var.poll_fields");
                var tweet_fields = mc.getProperty("uri.var.tweet_fields");
                var user_fields = mc.getProperty("uri.var.user_fields");

                // Add params to the queryParams array
                if (end_time != null && end_time != "") {
                    queryParams.push('end_time=' + end_time);
                } if (max_results != null && max_results != "") {
                    queryParams.push('max_results=' + max_results);
                } if (pagination_token != null && pagination_token != "") {
                    queryParams.push('pagination_token=' + pagination_token);
                } if (since_id != null && since_id != "") {
                    queryParams.push('since_id=' + since_id);
                } if (start_time != null && start_time != "") {
                    queryParams.push('start_time=' + start_time);
                } if (until_id != null && until_id != "") {
                    queryParams.push('until_id=' + until_id);
                } if (exclude != null && exclude != "") {
                    queryParams.push('exclude=' + exclude);
                } if (expansions != null && expansions != "") {
                    queryParams.push('expansions=' + expansions);
                } if (media_fields != null && media_fields != "") {
                    queryParams.push('media.fields=' + media_fields);
                } if (place_fields != null && place_fields != "") {
                    queryParams.push('place.fields=' + place_fields);
                } if (poll_fields != null && poll_fields != "") {
                    queryParams.push('poll.fields=' + poll_fields);
                } if (tweet_fields != null && tweet_fields != "") {
                    queryParams.push('tweet.fields=' + tweet_fields);
                } if (user_fields != null && user_fields != "") {
                    queryParams.push('user.fields=' + user_fields);
                }

                // Combine query params into a single string
                var queryParamsString = queryParams.join('&');

                if (queryParamsString !== '') {
                    mc.setProperty('uri.var.queryParams', queryParamsString);
                }
            ]]>
        </script>

        <property name="uri.var.callEndpointUri"
                  expression="fn:concat(get-property('uri.var.apiUrl'),'/2/users/',get-property('uri.var.id'),'/timelines/reverse_chronological?',get-property('uri.var.queryParams'))"/>
        <property name="NO_ENTITY_BODY" value="true" type="BOOLEAN" scope="axis2"/>
        <property name="httpMethod" value="get"/>
        <twitter.callWithRetry/>
    </sequence>
</template>

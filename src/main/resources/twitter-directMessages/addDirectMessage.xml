<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2025, WSO2 LLC. (https://www.wso2.com) All Rights Reserved.
 ~
 ~  WSO2 LLC. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<template xmlns="http://ws.apache.org/ns/synapse" name="addDirectMessage">
    <parameter name="dm_conversation_id"
               description="The dm_conversation_id of the conversation to add the Direct Message to."/>
    <parameter name="attachments"
               description="A single Media ID being attached to the Direct Message."/>
    <parameter name="text"
               description="Text of the Direct Message being created."/>

    <parameter name="responseVariable" description="The name of the variable to which the response should be stored."/>
    <parameter name="overwriteBody" description="Replace the Message Body in Message Context with the response of the operation."/>

    <sequence>
        <property name="uri.var.dm_conversation_id" expression="$func:dm_conversation_id"/>
        <property name="uri.var.attachments" expression="$func:attachments"/>
        <property name="uri.var.text" expression="$func:text"/>

        <payloadFactory media-type="json">
            <format>
            </format>
            <args>
            </args>
        </payloadFactory>

        <script language="js">
            <![CDATA[
                var payload = mc.getPayloadJSON();

                // Request body variables
                var attachments  = mc.getProperty('uri.var.attachments');
                var text  = mc.getProperty('uri.var.text');

                // Add variables to the request body
                if (attachments != null && attachments != "") {
                    payload.attachments = JSON.parse(attachments);
                } if (text != null && text != "") {
                    payload.text = text;
                }

                mc.setPayloadJSON(payload);
            ]]>
        </script>

        <!-- Use RestURLBuilder to construct endpoint URL -->
        <class name="org.wso2.carbon.twitter.connector.RestURLBuilder">
            <property name="endpointPath" value="/2/dm_conversations/{dm_conversation_id}/messages"/>
            <property name="pathParams" value="dm_conversation_id"/>
        </class>
        <!-- Set JSON headers and properties for Twitter API -->
        <property name="DISABLE_CHUNKING" scope="axis2" type="STRING" value="true"/>
        <property name="messageType" value="application/json" scope="axis2"/>
        <property name="ContentType" value="application/json" scope="axis2"/>
        <call>
            <endpoint>
                <http method="post"
                      uri-template="{uri.var.callEndpointUri}">
                    <timeout>
                        <duration>{$ctx:timeout}</duration>
                        <responseAction>fault</responseAction>
                    </timeout>
                </http>
            </endpoint>
        </call>
        
        <!-- Remove custom Twitter header information from response -->
        <header name="x-access-level" scope="transport" action="remove"/>
        <header name="x-twitter-response-tags" scope="transport" action="remove"/>
        <header name="x-transaction" scope="transport" action="remove"/>
        <header name="x-response-time" scope="transport" action="remove"/>
        <header name="x-connection-hash" scope="transport" action="remove"/>
        <header name="x-content-type-options" scope="transport" action="remove"/>
        <header name="x-frame-options" scope="transport" action="remove"/>
        <header name="x-rate-limit-limit" scope="transport" action="remove"/>
        <header name="x-rate-limit-remaining" scope="transport" action="remove"/>
        <header name="x-rate-limit-reset" scope="transport" action="remove"/>
        <header name="x-xss-protection" scope="transport" action="remove"/>
    </sequence>
</template>
